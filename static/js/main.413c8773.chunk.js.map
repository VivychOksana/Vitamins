{"version":3,"sources":["components/Header.js","components/Front.js","components/SecondTask.js","functions/functions.js","functions/condition.js","components/ThirdTask.js","functions/states.js","App.js","index.js"],"names":["Header","className","to","Front","state","figures","generatePolygon","sidesCount","color","points","fac","Math","PI","fill","i","x","cos","angle","y","sin","push","path","join","width","height","stroke","strokeWidth","key","vitaminsArr","this","props","input","split","map","vitamin","name","prevColor","setState","oldProps","figure","Component","SecondTask","inputValue","handleChange","target","value","type","onChange","placeholder","colors","destColor","arr","item","condition","max","sum","finds","filters","arrResult","moves","Condition","data","length","filter","undefined","ThirdTask","currentState","order","stopTimer","clearInterval","timer","changeState","prevState","steps","operators","transforms","statesArr","operation","forEach","stringArr","obj","states","setInterval","App","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.413c8773.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => (\r\n  <div className=\"header\">\r\n    <Link to=\"/task-2\">Task 2</Link>\r\n    <Link to=\"/task-3\">Task 3</Link>\r\n  </div>\r\n);\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass Front extends Component {\r\n  state = {\r\n    figures: []\r\n  };\r\n  componentDidMount() {\r\n    let arr = this.props.input.split(\" \");\r\n    let vitaminsArr = arr.map((vitamin) => {\r\n      return {\r\n        name: vitamin.split(\"\")[0],\r\n        color:  vitamin.split(\"\")[1],\r\n        prevColor: \"\"\r\n      }\r\n    });\r\n    this.setState({figures: vitaminsArr})\r\n  }\r\n  componentDidUpdate(oldProps) {\r\n    if(oldProps.input !== this.props.input) {\r\n      let arr = this.props.input.split(\" \");\r\n      let vitaminsArr = arr.map((vitamin) => {\r\n        return {\r\n          name: vitamin.split(\"\")[0],\r\n          color:  vitamin.split(\"\")[1],\r\n          prevColor: \"\"\r\n        }\r\n      });\r\n      this.setState({figures: vitaminsArr})\r\n    }\r\n  }\r\n  generatePolygon = (sidesCount, color) => {\r\n    const radius = 50;\r\n    const angle = 0;\r\n    const top = 100;\r\n    const left = 100;\r\n    const points = [];\r\n    const fac = 2 * Math.PI / sidesCount;\r\n    let fill = 'white'\r\n    if (color === 'G') {\r\n      fill = 'lightgrey'\r\n    }\r\n    if (color === 'B') {\r\n      fill = 'black'\r\n    }\r\n    for (let i = 0; i < sidesCount; i++) {\r\n      const x = left + radius * Math.cos(i * fac + angle / 180 * Math.PI);\r\n      const y = top + radius *Math.sin(i * fac + angle / 180 * Math.PI);\r\n      points.push(`${x} ${y}`);\r\n    }\r\n    const path = points.join(' ');\r\n    return (\r\n      <svg width={200} height={200} fill={fill} stroke='#111' strokeWidth='1' key={sidesCount}>\r\n        <polygon points={path} />\r\n      </svg>\r\n    )\r\n  };\r\n  render() {\r\n    const { figures } = this.state;\r\n    return (\r\n      <div>\r\n        {figures.map((figure) => this.generatePolygon(figure.name, figure.color))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Front;\r\n","import React, { Component } from 'react';\r\nimport Front from './Front.js';\r\n\r\nclass SecondTask extends Component {\r\n  state = {\r\n    inputValue: '3B 4B 5G 6W'\r\n  }\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      inputValue: target.value\r\n    });\r\n  };\r\n  render() {\r\n    const { inputValue } = this.state;\r\n    return (\r\n      <div className=\"second-task\">\r\n        <h2>Task 2</h2>\r\n        <input\r\n          type='text'\r\n          value={inputValue}\r\n          onChange={this.handleChange}\r\n          placeholder=\"state\"\r\n        />\r\n        <Front input={inputValue}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SecondTask;\r\n","export const canBeSwapped = (vitamin, destColor, arr) => {\r\n  const isMaxi = (vitamin, arr) => {\r\n    let color = vitamin.color;\r\n    let num = vitamin.name;\r\n\r\n    let toCheck = arr.filter((item) => {\r\n      return item.color === color && +item.name > +num;\r\n    });\r\n    return toCheck.length === 0;\r\n  };\r\n\r\n  const willBeMaxi = (vitamin, destColor, arr) => {\r\n    let num = vitamin.name;\r\n    let toCheck = arr.filter((item) => {\r\n      return item.color === destColor && +item.name > +num;\r\n    });\r\n    return toCheck.length === 0\r\n  };\r\n  return (isMaxi(vitamin, arr) && willBeMaxi(vitamin, destColor, arr) && vitamin.prevColor !== destColor)\r\n};\r\nexport const colors = (vitamin, destColor, arr) => {\r\n  return arr.map((item) => {\r\n    if (item.name === vitamin.name) {\r\n      item = { ...item, prevColor: item.color, color: destColor};\r\n    }\r\n    return item;\r\n  });\r\n};\r\n\r\nexport const transforms = (data) => {\r\n  return data.split(\" \").map((vitamin) => {\r\n    return {\r\n      name: vitamin.split(\"\")[0],\r\n      color:  vitamin.split(\"\")[1],\r\n      prevColor: \"\"\r\n    }\r\n  });\r\n};\r\n","const Condition = (data) => {\n  let vitaminsArr = data.split(\" \").map((vitamin) => {\n    return {\n      name: vitamin.split(\"\")[0],\n      color:  vitamin.split(\"\")[1]\n    }\n  });\n  let colours = [\"W\", \"G\", \"B\"];\n  let sum = 3;\n  let finds = vitaminsArr[0].color;\n  let max = vitaminsArr.length+2;\n  let results = 'W';\n  let filters = colours.filter((color) => finds && color !== results);\n  let arrResult = [];\n  if (vitaminsArr[vitaminsArr.length-1].color !== undefined) {\n    return condition(max, sum, finds, filters, results);\n  }\n  return arrResult;\n};\nconst condition = (max, sum, finds, filters, arrResult, moves=[]) => {\n  if (sum === max) {\n    moves.push([sum, finds, arrResult]);\n  }\n  else {\n    condition(max, sum+1, finds, arrResult, filters, moves);\n    moves.push([sum, finds, arrResult]);\n    condition(max, sum+1, filters, finds, arrResult, moves);\n  }\n  return moves;\n};\nexport default Condition;\n","import React, { Component } from 'react';\r\nimport { states } from '../functions/states.js';\r\nimport Front from './Front';\r\nimport Condition from '../functions/condition.js';\r\n\r\nclass ThirdTask extends Component {\r\n  state = {\r\n    inputValue: '3B 4B 5B 6B',\r\n    currentState: '',\r\n    order: [],\r\n    i: 0\r\n  };\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      inputValue: target.value\r\n    });\r\n  };\r\n  stopTimer = () => {\r\n    clearInterval(this.timer)\r\n  };\r\n  changeState = currentState => {\r\n    this.setState(prevState => ({ currentState, i: prevState.i + 1}))\r\n  };\r\n  componentDidMount(){\r\n    const steps = Condition(this.state.inputValue);\r\n    const order = states(this.state.inputValue, steps)\r\n    this.setState({ order })\r\n    this.timer = setInterval(() => {\r\n      this.changeState(order[this.state.i])\r\n    }, 1000)\r\n  };\r\n  componentDidUpdate() {\r\n    if (this.state.i >= this.state.order.length) {\r\n      this.stopTimer()\r\n    }\r\n  };\r\n  componentWillUnmount() {\r\n    this.stopTimer()\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"third-task\">\r\n        <h2>Task 3</h2>\r\n        <Front input={this.state.currentState}/>\r\n      </div>\r\n    );\r\n  };\r\n}\r\nexport default ThirdTask;\r\n","import { transforms, colors } from './functions.js';\r\nexport const states = (data, operators) => {\r\n  let vitaminsArr = transforms(data);\r\n  const statesArr = [data];\r\n  const arr = operators.map( operation => colors(vitaminsArr[operation[0] - 3], operation[2], vitaminsArr ));\r\n  arr.forEach(item => {\r\n    let stringArr = item.map(obj => `${obj.name}${obj.color}`);\r\n    statesArr.push(stringArr.join(' '));\r\n  });\r\n  return statesArr;\r\n};\r\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport SecondTask from './components/SecondTask';\nimport ThirdTask from './components/ThirdTask';\n\nconst App = () => (\n  <BrowserRouter>\n    <div className=\"app\">\n      <Header />\n      <Route path=\"/task-2\" component={SecondTask} />\n      <Route path=\"/task-3\" component={ThirdTask} />\n    </div>\n  </BrowserRouter>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}